m$positivepercapita
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[ is.na(m$positivepercapita)] = 0
m$positivepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
##Total per capita
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$totalpercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
m$positivepercapita
m$totalpercapita
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
m$POPULATION
m$Positive
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
m$positivepercapita
m$Positive
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita
m$positivepercapita[ is.na(m$positivepercapita)] = 0
m$positivepercapita
m$positivepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$totalpercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
proj4string(m) <- CRS("+init=epsg:4629")
m <- spTransform(m, CRS("+init=epsg:4629"))
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
geojson_write
install.packages("geojsonio")
library(geojsonio)
geojson_write
geojson_write(m, lat = NULL, lon = NULL, geometry = "point",
group = NULL, file = "merged.geojson", overwrite = TRUE,
precision = NULL, convert_wgs84 = TRUE, crs = NULL, ...)
geojson_write(m, lat = NULL, lon = NULL, geometry = "point",
group = NULL, file = "merged.geojson", overwrite = TRUE,
precision = NULL, convert_wgs84 = TRUE, crs = NULL)
geojson_write(m, lat = NULL, lon = NULL, geometry = "polygon",
group = NULL, file = "merged.geojson", overwrite = TRUE,
precision = NULL, convert_wgs84 = TRUE, crs = NULL)
geojson_write(m, lat = NULL, lon = NULL, geometry = "polygon",
group = group, file = "merged.geojson", overwrite = TRUE,
precision = NULL, convert_wgs84 = TRUE, crs = NULL)
proj4string(m) <- CRS("+init=epsg:4629")
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
proj4string(m) <- CRS("+init=epsg:4269")
proj4string(m) <- CRS("+init=epsg:4269")
proj4string(m) <- CRS("+init=epsg:4269")
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84"))
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
quantile(m$totalpercapita)
quantile(m$totalpercapita, probs = seq(0, 1, length.out = 5))
quantile(m$totalpercapita, probs = seq(0, 1, length.out = 6))
quantile(m$totalpercapita, probs = seq(0, 1, .25))
quantile(m$totalpercapita,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, NA)/100)
quantile(m$positivepercapita, probs = seq(0, 1, .25))
quantile(m$Positive, probs = seq(0, 1, .25))
as.numeric(m$totalpercapita)
as.numeric(m$positivepercapita)
m$positivepercapita <- as.numeric(m$positivepercapita)
quantile(m$positivepercapita,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, NA)/100)
quantile(m$Total,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, NA)/100)
quantile(m$Positive, probs = seq(0, 1, .25))
quantile(m$Total, probs = seq(0, 1, .25))
quantile(m$totalpercapita, probs = seq(0, 1, .25))
m$totalpercapita <- as.numeric(m$totalpercapita)
quantile(m$totalpercapita, probs = seq(0, 1, .25))
quantile(m$positivepercapita, probs = seq(0, 1, .25))
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
quantile(m$Total, probs = seq(0, 1, .25))
quantile(m$Positive, probs = seq(0, 1, .25))
quantile(m$positivepercapita, probs = seq(0, 1, .25))
quantile(m$positivepercapita, probs = seq(0, 1, .20))
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[ is.na(m$positivepercapita)] = 0
m$positivepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
m$positivepercapita <- as.numeric(m$positivepercapita)
##Total per capita
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$totalpercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
m$totalpercapita <- as.numeric(m$totalpercapita)
##Assign CRS
proj4string(m) <- CRS("+init=epsg:4269")
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84"))
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
writeOGR(m, "merged2.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$POPULATION)*1000
m$positiveperthou[ is.na(m$positivepercapita)] = 0
m$positiveperthou <- format(round(m$positivepercapita, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positivepercapita)
##Total per capita
m$totalperthou <- (m$Total / m$POPULATION)*1000
m$totalperthou[is.na(m$totalpercapita)] = 0
m$totalperthou <- format(round(m$totalpercapita, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalpercapita)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
##addendum
##Get quantiles
## quantile(m$positivepercapita, probs = seq(0, 1, .20))
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$POPULATION)*1000
m$positiveperthou
m$positiveperthou[ is.na(m$positiveperthou)] = 0
m$positiveperthou <- format(round(m$positiveperthou, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positiveperthou)
m$totalperthou <- (m$Total / m$POPULATION)*1000
m$totalperthou[is.na(m$totalperthou)] = 0
m$totalperthou <- format(round(m$totalperthou, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalperthou)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
quantile(m$totalperthou, probs = seq(0, 1, .20))
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
View(p)
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Rename to merge
d <- d %>% rename(ZIPCODE = zcta)
##Rename to merge
d <- d %>% rename(zcta = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
View(d)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='zcta')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$POPULATION)*1000
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
c <- read_csv("data/test/total_population_2010_zcta.csv")
View(c)
View(d)
c <- read_csv("data/test/total_population_2010_zcta.csv")
View(c)
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
c <- read_csv("data/test/total_population_2010_zcta.csv")
View(c)
c <- read_csv("data/test/total_population_2010_zcta.csv")
View(c)
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
d <- read_csv(url(urlfile))
d <- d %>% rename(zcta = MODZCTA)
View(d)
View(c)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(d, c, by='zcta')
View(m)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, d, by='zcta')
View(m)
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
c <- read_csv("data/test/total_population_2010_zcta.csv")
View(d)
View(d)
##Remove unncessary columns
d <- d %>% select(1,2,3)
##Rename to merge
d <- d %>% rename(zcta = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(d, c, by='zcta')
View(m)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, d, by='zcta')
View(m)
rm(m)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(d, c, by='zcta')
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, p, by='zcta')
View(m)
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
c <- read_csv("data/test/total_population_2010_zcta.csv")
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Remove unncessary columns
d <- d %>% select(1,2,3)
##Rename to merge
d <- d %>% rename(zcta = MODZCTA)
View(p)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(d, c, by='zcta')
View(d)
View(m)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, p, by='zcta')
View(m)
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$P001001)*1000
m$positiveperthou[ is.na(m$positiveperthou)] = 0
m$positiveperthou <- format(round(m$positiveperthou, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positiveperthou)
##Total per capita
m$totalperthou <- (m$Total / m$P001001)*1000
m$totalperthou[is.na(m$totalperthou)] = 0
m$totalperthou <- format(round(m$totalperthou, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalperthou)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, p, by='zcta')
View(m)
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
c <- read_csv("data/test/total_population_2010_zcta.csv")
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Remove unncessary columns
d <- d %>% select(1,2,3)
##Rename to merge
d <- d %>% rename(zcta = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, p, by='zcta')
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(d, p, by='zcta')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$P001001)*1000
m$positiveperthou[ is.na(m$positiveperthou)] = 0
m$positiveperthou <- format(round(m$positiveperthou, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positiveperthou)
##Total per capita
m$totalperthou <- (m$Total / m$P001001)*1000
m$totalperthou[is.na(m$totalperthou)] = 0
m$totalperthou <- format(round(m$totalperthou, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalperthou)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read_csv(url(urlfile))
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/test/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
c <- read_csv("data/test/total_population_2010_zcta.csv")
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Remove unncessary columns
d <- d %>% select(1,2,3)
##Rename to merge
d <- d %>% rename(zcta = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='zcta')
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(m, c, by='zcta')
View(m)
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$P001001)*1000
m$positiveperthou[ is.na(m$positiveperthou)] = 0
m$positiveperthou <- format(round(m$positiveperthou, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positiveperthou)
##Total per capita
m$totalperthou <- (m$Total / m$P001001)*1000
m$totalperthou[is.na(m$totalperthou)] = 0
m$totalperthou <- format(round(m$totalperthou, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalperthou)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Write as GeoJSON
writeOGR(m, "merged.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
View(m)
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Set working directory
setwd("C:/Users/jaramana/Desktop/COVID Tracker NYC")
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/raw/nyu_2451_34509/nyu_2451_34509")
d <- read_csv(url(urlfile))
c <- read_csv("data/raw/total_population_2010_zcta.csv")
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Remove unncessary columns
d <- d %>% select(1,2,3)
##Rename column header to merge
d <- d %>% rename(zcta = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='zcta')
##Merge Spatial data with census data
m <- merge(m, c, by='zcta')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$P001001)*1000
m$positiveperthou[ is.na(m$positiveperthou)] = 0
m$positiveperthou <- format(round(m$positiveperthou, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positiveperthou)
##Total per capita
m$totalperthou <- (m$Total / m$P001001)*1000
m$totalperthou[is.na(m$totalperthou)] = 0
m$totalperthou <- format(round(m$totalperthou, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalperthou)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Write as GeoJSON
writeOGR(m, "data/covid_nyc.json", layer="merged", driver="json", overwrite_layer=TRUE)
writeOGR(m, "data/covid_nyc.json", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "data/covid_nyc.js", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "data/covid_nyc_test.js", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
