basic_summ = summarise(basic_summ,
FEMALE =
paste('$',formatC(sprintf(mean(Base.Salary[Gender=="F"]),fmt = '%#.2f'), big.mark=',', format = 'f')),
MALE =
paste('$',formatC(sprintf(mean(Base.Salary[Gender=="M"]),fmt = '%#.2f'), big.mark=',', format = 'f')),
GAP =
percent((round((((mean(Base.Salary[Gender=="F"]) - mean(Base.Salary[Gender=="M"])) / ((mean(Base.Salary[Gender=="F"]) + mean(Base.Salary[Gender=="M"])))/2)),3))))
kable(basic_summ) %>%
kable_styling(font_size = 16, fixed_thead = F, full_width = T) %>%
column_spec(1, bold = T)
kable(basic_summ) %>%
kable_styling(font_size = 16, fixed_thead = F, full_width = T) %>%
column_spec(1, bold = T)
kable(basic_summ) %>%
kable_styling(font_size = 16, fixed_thead = F, full_width = T) %>%
column_spec(1, bold = T)
library(raster)
# read data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read.csv("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/tests-by-zcta.csv")
install.packages("raster")
library(raster)
# read data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read.csv("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/tests-by-zcta.csv")
library(rgdal)
install.packages("rgdal")
library(raster)
library(rgdal)
# read data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read.csv("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/tests-by-zcta.csv")
m <- merge(p, d, by='key')
View(d)
View(p)
View(d)
d %>%
rename(
MODZCTA = ZIPCODE
)
library(tidyverse)
d %>%
rename(
MODZCTA = ZIPCODE
)
d %>%
rename(
ZIPCODE = MODZCTA
)
View(d)
d <-
rename(
ZIPCODE = MODZCTA
)
d <- d %>%
rename(
ZIPCODE = MODZCTA
)
View(d)
# merge on common variable, here called 'key'
m <- merge(p, d, by='ZIPCODE')
# perhaps save as shapefile again
shapefile(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test")
shapefile(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test")
library(raster)
library(rgdal)
library(tidyverse)
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read.csv("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/tests-by-zcta.csv")
d <- d %>%
rename(
ZIPCODE = MODZCTA
)
m <- merge(p, d, by='ZIPCODE')
shapefile(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test")
shapefile(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test")
View(m)
shapefile(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test")
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="meuse", driver="GeoJSON")
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON")
library(censusapi)
install.packages(censusapi)
install.packages("censusapi")
library(censusapi)
mycensuskey <- "56d651277c9457cdcc219fe907ad94c3dce42de8"
View(ListCensusApis())
availableapis <- listCensusApis()
View(availableapis)
ny2 <- get_acs(geography = "tract",
variables = racevars,
state = "NY",
county = "New York",
geometry = TRUE,
cb = FALSE,
summary_var = "HD01_VD01")
get_acs
library(tidycensus)
install.packages("tidycensus")
ny2 <- get_acs(geography = "tract",
variables = racevars,
state = "NY",
county = "New York",
geometry = TRUE,
cb = FALSE,
summary_var = "HD01_VD01")
library(tidycensus)
ny2 <- get_acs(geography = "tract",
variables = racevars,
state = "NY",
county = "New York",
geometry = TRUE,
cb = FALSE,
summary_var = "HD01_VD01")
census_api_key("56d651277c9457cdcc219fe907ad94c3dce42de8")
ny2 <- get_acs(geography = "tract",
variables = racevars,
state = "NY",
county = "New York",
geometry = TRUE,
cb = FALSE,
summary_var = "HD01_VD01")
library(raster)
library(rgdal)
library(tidyverse)
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read.csv("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/tests-by-zcta.csv")
d <- d %>%
rename(
ZIPCODE = MODZCTA
)
View(d)
View(p)
head(p)
shape@data <- na.omit(p@BLDGZIP)
library(dplyr)
p@data %>%
select(1, 3)
p@data %>%
select(1, 4)
p@data <- p@data %>%
select(1, 4)
head(p)
d <- d %>%
rename(
ZIPCODE = MODZCTA
)
m <- merge(p, d, by='ZIPCODE')
View(d)
View(m)
head(m)
m$valuepercapita <- m$Positive / m$POPULATION
head(m)
m$valuepercapita <- (m$Positive / m$POPULATION)*100
head(m)
format(round((m$Positive / m$POPULATION)*100, 2), nsmall = 2)
m$valuepercapita <- format(round((m$Positive / m$POPULATION)*100, 2), nsmall = 2)
m$valuepercapita[is.na(m$valuepercapita)] <- 0
m$valuepercapita
m$valuepercapita[is.na(m$valuepercapita)] <- 0
m$valuepercapita
View(m)
m@data[["valuepercapita"]]
m$valuepercapita[is.na(m$valuepercapita)] = 0
m$valuepercapita
m$valuepercapita <- format(round((m$Positive / m$POPULATION)*100, 2), nsmall = 2)
m$valuepercapita
m$Positive / m$POPULATION)*100
(m$Positive / m$POPULATION)*100
m$valuepercapita <- (m$Positive / m$POPULATION)*100, 2)
m$valuepercapita[is.na(m$valuepercapita)] = 0
m$valuepercapita <- format(round(m$valuepercapita, 2), nsmall = 2)
m$valuepercapita <- (m$Positive / m$POPULATION)*100, 2)
m$valuepercapita <- (m$Positive / m$POPULATION)*100
m$valuepercapita[is.na(m$valuepercapita)] = 0
m$valuepercapita
m$valuepercapita <- format(round(m$valuepercapita, 2), nsmall = 2)
m$valuepercapita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positiveepercapita <- format(round(m$valuepercapita, 2), nsmall = 2)
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$valuepercapita)] = 0
m$totalpercapita <- format(round(m$valuepercapita, 2), nsmall = 2)
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positiveepercapita <- format(round(m$valuepercapita, 2), nsmall = 2)
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positiveepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$valuepercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
head(m)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
data<-read_csv(url(urlfile))
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
geography <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
data<-read_csv(url(urlfile))
##Remove unncessary columns
geography@data <- geography@data %>% select(1, 4)
##Rename to merge
data <- data %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
merged <- merge(p, d, by='ZIPCODE')
##Positive per capita
merged$positivepercapita <- (merged$Positive / merged$POPULATION)*100
merged$positivepercapita[is.na(merged$valuepercapita)] = 0
merged$positiveepercapita <- format(round(merged$positivepercapita, 2), nsmall = 2)
##Total per capita
merged$totalpercapita <- (merged$Total / merged$POPULATION)*100
merged$totalpercapita[is.na(merged$valuepercapita)] = 0
merged$totalpercapita <- format(round(merged$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="merged", driver="GeoJSON")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
geography <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
data<-read_csv(url(urlfile))
##Remove unncessary columns
geography@data <- geography@data %>% select(1, 4)
##Rename to merge
data <- data %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
merged <- merge(geography, data, by='ZIPCODE')
##Positive per capita
merged$positivepercapita <- (merged$Positive / merged$POPULATION)*100
merged$positivepercapita[is.na(merged$valuepercapita)] = 0
merged$positiveepercapita <- format(round(merged$positivepercapita, 2), nsmall = 2)
##Total per capita
merged$totalpercapita <- (merged$Total / merged$POPULATION)*100
merged$totalpercapita[is.na(merged$valuepercapita)] = 0
merged$totalpercapita <- format(round(merged$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="merged", driver="GeoJSON")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
geography <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
data<-read_csv(url(urlfile))
##Remove unncessary columns
geography@data <- geography@data %>% select(1, 4)
##Rename to merge
data <- data %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
merged <- merge(geography, data, by='ZIPCODE')
##Positive per capita
merged$positivepercapita <- (merged$Positive / merged$POPULATION)*100
merged$positivepercapita[is.na(merged$valuepercapita)] = 0
merged$positiveepercapita <- format(round(merged$positivepercapita, 2), nsmall = 2)
##Total per capita
merged$totalpercapita <- (merged$Total / merged$POPULATION)*100
merged$totalpercapita[is.na(merged$valuepercapita)] = 0
merged$totalpercapita <- format(round(merged$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="merged", driver="GeoJSON")
##Write as GeoJSON
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/", layer="merged", driver="GeoJSON")
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test", layer="merged", driver="GeoJSON")
View(merged)
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test", layer="merged", driver="GeoJSON")
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/", layer="merged", driver="GeoJSON")
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/", layer="merged", driver="GeoJSON")
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
##Load data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d <- read.csv("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/tests-by-zcta.csv")
##Remove unncessary columns
p@data <- p@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positiveepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
##Total per capita
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$valuepercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
geography <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
data<-read_csv(url(urlfile))
##Remove unncessary columns
geography@data <- geography@data %>% select(1, 4)
View(data)
data <- data %>% rename(ZIPCODE = MODZCTA)
merged <- merge(geography, data, by='ZIPCODE')
View(merged)
merged$positivepercapita <- (merged$Positive / merged$POPULATION)*100
merged$positivepercapita[is.na(merged$valuepercapita)] = 0
merged$positiveepercapita <- format(round(merged$positivepercapita, 2), nsmall = 2)
View(merged)
merged$positivepercapita <- format(round(merged$positivepercapita, 2), nsmall = 2)
##Total per capita
merged$totalpercapita <- (merged$Total / merged$POPULATION)*100
merged$totalpercapita[is.na(merged$valuepercapita)] = 0
merged$totalpercapita <- format(round(merged$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/", layer="merged", driver="GeoJSON")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d<-read_csv(url(urlfile))
##Remove unncessary columns
p@data <- geography@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positivepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
##Total per capita
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$valuepercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON")
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/", layer="2", driver="GeoJSON")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
geography <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
data<-read_csv(url(urlfile))
##Remove unncessary columns
geography@data <- geography@data %>% select(1, 4)
##Rename to merge
data <- data %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
merged <- merge(geography, data, by='ZIPCODE')
##Positive per capita
merged$positivepercapita <- (merged$Positive / merged$POPULATION)*100
merged$positivepercapita[is.na(merged$valuepercapita)] = 0
merged$positiveepercapita <- format(round(merged$positivepercapita, 2), nsmall = 2)
##Total per capita
merged$totalpercapita <- (merged$Total / merged$POPULATION)*100
merged$totalpercapita[is.na(merged$valuepercapita)] = 0
merged$totalpercapita <- format(round(merged$totalpercapita, 2), nsmall = 2)
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/", layer="2", driver="GeoJSON")
##Write as GeoJSON
writeOGR(merged, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/", layer="HELLO", driver="GeoJSON")
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d<-read_csv(url(urlfile))
##Remove unncessary columns
p@data <- geography@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positiveepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
##Total per capita
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$valuepercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON")
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library (readr)
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/ZIP_CODE_040114/ZIP_CODE_040114.shp")
d<-read_csv(url(urlfile))
##Remove unncessary columns
p@data <- geography@data %>% select(1, 4)
##Rename to merge
d <- d %>% rename(ZIPCODE = MODZCTA)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='ZIPCODE')
##Positive per capita
m$positivepercapita <- (m$Positive / m$POPULATION)*100
m$positivepercapita[is.na(m$valuepercapita)] = 0
m$positivepercapita <- format(round(m$positivepercapita, 2), nsmall = 2)
##Total per capita
m$totalpercapita <- (m$Total / m$POPULATION)*100
m$totalpercapita[is.na(m$valuepercapita)] = 0
m$totalpercapita <- format(round(m$totalpercapita, 2), nsmall = 2)
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON")
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/test", layer="m", driver="GeoJSON")
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/2", layer="m", driver="GeoJSON")
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/", layer="m", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test/", layer="m", driver="GeoJSON", overwrite_layer=TRUE)
##Write as GeoJSON
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test.geojson", layer="m", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "C:/Users/jaramana/Desktop/COVID Tracker NYC/data/test/test.geojson", layer="m", driver="GeoJSON", overwrite_layer=TRUE)
##Load package
library(raster)
library(rgdal)
library(tidyverse)
library(dplyr)
library(readr)
library(jsonlite)
##Set working directory
setwd("C:/Users/jaramana/Desktop/covid-tracker-nyc")
##Spatial Visualization--
##Link to DOHMH Github Data
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv"
##Load data
p <- shapefile("data/raw/nyu_2451_34509_filtered/nyu_2451_34509_filtered")
d <- read_csv(url(urlfile))
c <- read_csv("data/raw/cdc_svi_zcta_crosswalk.csv")
n <- read_csv("data/raw/zcta_neighborhood_names.csv")
##Remove unncessary columns
p@data <- p@data %>% select(1)
##Remove unncessary columns
d <- d %>% select(1,2,3)
##Rename column header to merge
d <- d %>% rename(zcta = MODZCTA)
##Sum duplicate zipcodes (sometimes happens)
d <- aggregate(list(d$'Positive', d$'Total'), by = list(d$'zcta'), sum)
d <- rename(d, 'zcta' = 1)
d <- rename(d, 'Positive' = 2)
d <- rename(d, 'Total' = 3)
c <- rename(c, 'population' = 4)
##Merge Zip Code shapefile with Testing data (DOHMH)
m <- merge(p, d, by='zcta')
##Merge Spatial data with neighborhood names
# m <- merge(m, n, by='zcta') For some reason I created this at one point, doesn't seem necessary right now.
##Merge Spatial data with census data
m <- merge(m, c, by='zcta')
m$Positive[ is.na(m$Positive)] = 0
m$Total[ is.na(m$Total)] = 0
##Positive per capita
m$positiveperthou <- (m$Positive / m$population)*1000
m$positiveperthou[ is.na(m$positiveperthou)] = 0
m$positiveperthou <- format(round(m$positiveperthou, 2), nsmall = 2)
m$positiveperthou <- as.numeric(m$positiveperthou)
##Total per capita
m$totalperthou <- (m$Total / m$population)*1000
m$totalperthou[is.na(m$totalperthou)] = 0
m$totalperthou <- format(round(m$totalperthou, 2), nsmall = 2)
m$totalperthou <- as.numeric(m$totalperthou)
##Assign CRS
m <- spTransform(m, CRS("+proj=longlat +datum=WGS84 +init=epsg:4269"))
##Write as GeoJSON
writeOGR(m, "data/covid_nyc.json", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
writeOGR(m, "data/covid_nyc.geojson", layer="merged", driver="GeoJSON", overwrite_layer=TRUE)
##Get quantiles for breaks / legend
quantile(m$totalperthou, probs = seq(0, 1, .20))
